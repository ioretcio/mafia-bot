from aiogram import Router, types, F
from handlers.start import get_back_to_main_menu
from utils import safe_edit_or_send
from models.game import Game
from database import SessionLocal
from models.payment import Payment

router = Router()

@router.callback_query(F.data == "nameplate")
async def handle_nameplate(callback: types.CallbackQuery):
    await safe_edit_or_send(
        callback.message,
        "üìõ –§–æ—Ä–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—á–∫–∏ –±—É–¥–µ —Ç—É—Ç.",
        reply_markup=get_back_to_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "history")
async def handle_history(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    session = SessionLocal()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    from models.user import User
    user = session.query(User).filter_by(tg_id=user_id).first()

    if not user:
        await callback.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        session.close()
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ
    payments = Payment.get_user_payments(user.id)

    if not payments:
        await safe_edit_or_send(
            callback.message,
            "üì≠ –í–∏ —â–µ –Ω–µ –∑–¥—ñ–π—Å–Ω—é–≤–∞–ª–∏ –æ–ø–ª–∞—Ç.",
            reply_markup=get_back_to_main_menu()
        )
        await callback.answer()
        session.close()
        return

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç
    lines = ["üìä <b>–Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–ª–∞—Ç:</b>\n"]
    for p in payments:
        game = session.query(Game).filter_by(id=p.game_id).first() if p.game_id else None
        game_info = f"{game.date} {game.time}" if game else "‚Äî"
        lines.append(
            f"‚Ä¢ {p.date.strftime('%Y-%m-%d %H:%M')} ‚Äî <b>{p.amount} –≥—Ä–Ω</b> ‚Äî {p.status.upper()} ‚Äî {game_info}"
        )

    text = "\n".join(lines)

    await safe_edit_or_send(
        callback.message,
        text,
        reply_markup=get_back_to_main_menu()
    )
    await callback.answer()
    session.close()


@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: types.CallbackQuery):
    session = SessionLocal()
    from models.user import User
    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()

    if not user:
        await callback.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        session.close()
        return

    user.receive_notifications = not user.receive_notifications
    session.commit()
    session.close()

    await callback.answer("üîÅ –°—Ç–∞–Ω —Ä–æ–∑—Å–∏–ª–∫–∏ –∑–º—ñ–Ω–µ–Ω–æ.")
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    await handle_settings(callback)


@router.callback_query(F.data == "settings")
async def handle_settings(callback: types.CallbackQuery):
    session = SessionLocal()
    from models.user import User
    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()

    if not user:
        await callback.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        session.close()
        return

    status = "‚úÖ –¢–∞–∫" if user.receive_notifications else "‚ùå –ù—ñ"
    text = f"‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —ñ–≥—Ä–∏ —Ç–∞ –ø–æ–¥—ñ—ó: {status}"

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="üîî –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω —Ä–æ–∑—Å–∏–ª–∫–∏",
            callback_data="toggle_notifications"
        )],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await safe_edit_or_send(callback.message, text, reply_markup=markup)
    await callback.answer()
    session.close()