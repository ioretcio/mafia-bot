from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import get_connection
from handlers.start import get_back_to_main_menu
from models import User
router = Router()
from aiogram.utils.markdown import hbold, hitalic

@router.callback_query(F.data == "upcoming_events")
async def show_upcoming_events(callback: types.CallbackQuery):
    conn = get_connection()
    c = conn.cursor()
    c.execute("""
        SELECT 
            g.id, g.date, g.time, g.location, g.type, 
            (SELECT COUNT(*) FROM registrations r WHERE r.game_id = g.id) as reg_count,
            g.player_limit
        FROM games g
        WHERE g.date >= DATE('now')
        ORDER BY g.date LIMIT 5
    """)
    events = c.fetchall()
    conn.close()

    if not events:
        await callback.message.edit_text("üîï –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.", reply_markup=get_back_to_main_menu())
        await callback.answer()
        return

    await callback.message.delete()

    for event in events:
        game_id, date, time, location, type_, reg_count, player_limit = event
        text = f"üìÖ {hbold(date)} –æ {hitalic(time)}\nüéÆ {type_}\nüìç {location}\nüë• –ó–∞–ø–∏—Å–∞–Ω–æ: {reg_count}/{player_limit}"
        buttons = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì• –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å", callback_data=f"signup:{date}_{time}")],
                [InlineKeyboardButton(text="üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤", callback_data=f"players:{game_id}")],
                [InlineKeyboardButton(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å", callback_data=f"unregister:{game_id}")]
            ]
        )
        await callback.message.answer(text, reply_markup=buttons, parse_mode="HTML")

    await callback.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é", reply_markup=get_back_to_main_menu())
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("signup:"))
async def handle_signup(callback: types.CallbackQuery):
    data = callback.data.split("signup:")[1]
    date, time = data.split("_")

    conn = get_connection()
    c = conn.cursor()

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≥—Ä—É –ø–æ –¥–∞—Ç—ñ —Ç–∞ —á–∞—Å—É
    c.execute("SELECT id FROM games WHERE date = ? AND time = ?", (date, time))
    game = c.fetchone()

    if not game:
        await callback.answer("‚ö†Ô∏è –ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        conn.close()
        return

    game_id = game[0]

    # –û—Ç—Ä–∏–º—É—î–º–æ user.id –∑–∞ tg_id
    user = User.get_by_tg_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        conn.close()
        return

    user_id = user[0]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π
    c.execute("SELECT id FROM registrations WHERE user_id = ? AND game_id = ?", (user_id, game_id))
    existing = c.fetchone()
    if existing:
        await callback.answer("‚ÑπÔ∏è –í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü—é –≥—Ä—É.", show_alert=True)
        conn.close()
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ª—ñ–º—ñ—Ç
    c.execute("SELECT COUNT(*) FROM registrations WHERE game_id = ?", (game_id,))
    reg_count = c.fetchone()[0]
    c.execute("SELECT player_limit FROM games WHERE id = ?", (game_id,))
    player_limit = c.fetchone()[0]
    if player_limit and reg_count >= player_limit:
        await callback.answer("‚ùå –ú—ñ—Å—Ü—å –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.", show_alert=True)
        conn.close()
        return

    # –ó–∞–ø–∏—Å –¥–æ —Ç–∞–±–ª–∏—Ü—ñ registrations
    c.execute(
        "INSERT INTO registrations (user_id, game_id, payment_type, present) VALUES (?, ?, ?, ?)",
        (user_id, game_id, "pending", 1)
    )
    conn.commit()
    conn.close()

    await callback.answer("‚úÖ –í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –≥—Ä—É!")


@router.callback_query(lambda c: c.data.startswith("players:"))
async def handle_show_players(callback: types.CallbackQuery):
    game_id = callback.data.split("players:")[1]

    conn = get_connection()
    c = conn.cursor()

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    c.execute("""
        SELECT u.full_name, u.username
        FROM registrations r
        JOIN users u ON r.user_id = u.id
        WHERE r.game_id = ?
    """, (game_id,))
    players = c.fetchall()
    conn.close()

    if not players:
        text = "üîç –ü–æ–∫–∏ —â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–≤—Å—è."
    else:
        text = "üë• <b>–£—á–∞—Å–Ω–∏–∫–∏ –≥—Ä–∏:</b>\n\n"
        for i, (full_name, username) in enumerate(players, 1):
            text += f"{i}. {full_name}"
            if username:
                text += f" (@{username})"
            text += "\n"

    await callback.message.answer(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data.startswith("unregister:"))
async def handle_unregister(callback: types.CallbackQuery):
    game_id = callback.data.split("unregister:")[1]

    conn = get_connection()
    c = conn.cursor()

    # –û—Ç—Ä–∏–º–∞—Ç–∏ user_id –ø–æ tg_id
    c.execute("SELECT id FROM users WHERE tg_id = ?", (callback.from_user.id,))
    row = c.fetchone()
    if not row:
        await callback.answer("‚ö†Ô∏è –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.", show_alert=True)
        conn.close()
        return

    user_id = row[0]

    # –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –Ω–∞ –≥—Ä—É
    c.execute("DELETE FROM registrations WHERE user_id = ? AND game_id = ?", (user_id, game_id))
    conn.commit()
    conn.close()

    await callback.answer("‚ùå –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Å–≤–æ—é —É—á–∞—Å—Ç—å.")
    await callback.message.answer("–í–∞—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")