from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold, hitalic
from handlers.start import get_back_to_main_menu
from database import SessionLocal
from models.user import User
from models.game import Game
from models.registration import Registration
from models.payment import Payment
from datetime import date
from wayforpay_client import WayForPayClient
from utils import safe_edit_or_send

router = Router()
wfp = WayForPayClient()

@router.callback_query(F.data == "upcoming_events")
async def show_upcoming_events(callback: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()
    games = (
        session.query(Game)
        .filter(Game.date >= date.today())
        .order_by(Game.date)
        .limit(5)
        .all()
    )
    if not games:
        await callback.message.edit_text("üîï –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.", reply_markup=get_back_to_main_menu())
        await callback.answer()
        session.close()
        return

    
    message_ids = []
    for idx, game in enumerate(games):
        reg_count = session.query(Registration).filter(Registration.game_id == game.id).count()
        is_registered = session.query(Registration).filter_by(game_id=game.id, user_id=user.id).first() is not None

        text = f"üìÖ {hbold(game.date)} –æ {hitalic(game.time)}\nüéÆ {game.type}\nüìç {game.location}\nüë• –ó–∞–ø–∏—Å–∞–Ω–æ: {reg_count}/{game.player_limit}"

        buttons = []
        if not is_registered:
            buttons.append([InlineKeyboardButton(text="üì• –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å", callback_data=f"signup:{game.date}_{game.time}")])
        else:
            buttons.append([InlineKeyboardButton(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å", callback_data=f"unregister:{game.id}")])
        buttons.append([InlineKeyboardButton(text="üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤", callback_data=f"players:{game.id}")])


        if idx == len(games) - 1:
            to_delete = "_".join(f"{mid}" for mid in message_ids)
            back_callback = f"main_menu_{to_delete}"
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é", callback_data=back_callback)])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        if(idx == 0):
            msg = await safe_edit_or_send(callback.message, text, reply_markup=markup, parse_mode="HTML")
            message_ids.append(msg.message_id)
        else:
            msg = await callback.message.answer(text, reply_markup=markup, parse_mode="HTML")
            message_ids.append(msg.message_id)


    session.close()


@router.callback_query(lambda c: c.data.startswith("signup:"))
async def handle_signup(callback: types.CallbackQuery):
    session = SessionLocal()
    data = callback.data.split("signup:")[1]
    date_, time = data.split("_")

    game = session.query(Game).filter_by(date=date_, time=time).first()
    if not game:
        await callback.answer("‚ö†Ô∏è –ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        session.close()
        return

    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()
    if not user:
        await callback.answer("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        session.close()
        return

    # ‚úÖ –°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π order_reference
    order_reference = f"inv_{user.id}_{game.id}_{date_}_{int(time.replace(':',''))}"

    # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–ª–∞—Ç–µ–∂—É
    existing_order = session.query(Payment).filter_by(order_reference=order_reference).first()

    if existing_order:
        if existing_order.status == "approved":
            already_registered = session.query(Registration).filter_by(user_id=user.id, game_id=game.id).first()
            if not already_registered:
                registration = Registration(user_id=user.id, game_id=game.id)
                session.add(registration)
                session.commit()
                await callback.message.answer("‚úÖ –í–∏ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —ñ –≤–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ –≥—Ä—É!")
            else:
                await callback.message.answer("‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü—é –≥—Ä—É.")
            await callback.answer()
            session.close()
            return
        else:
            # redirect to payment (existing)
            buttons = [
                [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ {existing_order.amount} –≥—Ä–Ω", callback_data="pay_dummy")],
                [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment:{existing_order.order_reference}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            await callback.message.answer("üí∏ –û–ø–ª–∞—Ç–∞ –≤–∂–µ –æ—á—ñ–∫—É—î—Ç—å—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–±–æ –æ–ø–ª–∞—Ç—ñ—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
            await callback.answer()
            session.close()
            return

    # üßÆ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
    reg_count = session.query(Registration).filter_by(game_id=game.id).count()
    if game.player_limit and reg_count >= game.player_limit:
        await callback.answer("‚ùå –ú—ñ—Å—Ü—å –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.", show_alert=True)
        session.close()
        return

    # üßæ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω–≤–æ–π—Å—É
    amount = game.price or 0
    invoice = wfp.create_invoice(order_reference=order_reference, amount=amount, product_name="Game Registration")

    # üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
    payment = Payment(
        user_id=user.id,
        game_id=game.id,
        amount=amount,
        payment_type="card",
        status="pending",
        order_reference=order_reference
    )
    session.add(payment)
    session.commit()

    # üîò –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏
    invoice_url = invoice.get("invoiceUrl")
    buttons = [
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=invoice_url)],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment:{order_reference}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

    await callback.message.answer("üí∏ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç–∏ –≥—Ä—É!", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()
    session.close()




@router.callback_query(lambda c: c.data.startswith("check_payment:"))
async def check_payment_status(callback: types.CallbackQuery):
    order_reference = callback.data.split("check_payment:")[1]
    print(order_reference)
    from wayforpay_client import WayForPayClient  # –∞–±–æ —ñ–Ω—à–∏–π —Ç–≤—ñ–π —à–ª—è—Ö
    wfp = WayForPayClient()

    result = wfp.check_payment_status(order_reference)
    print(result)
    status = result.get("transactionStatus")

    if status == "Approved":
        session = SessionLocal()
        Payment.update_status_by_reference(order_reference, "paid")

        payment = session.query(Payment).filter_by(order_reference=order_reference).first()
        user = session.query(User).get(payment.user_id)
        game = session.query(Game).get(payment.game_id)

        already_registered = session.query(Registration).filter_by(user_id=user.id, game_id=game.id).first()
        if not already_registered:
            registration = Registration(user_id=user.id, game_id=game.id, payment_type="card")
            session.add(registration)
            session.commit()

        session.close()
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ –≥—Ä—É.")
    elif status == "Pending":
        await callback.answer("‚è≥ –û–ø–ª–∞—Ç–∞ —â–µ –æ—á—ñ–∫—É—î—Ç—å—Å—è...", show_alert=True)
    else:
        await callback.answer(f"‚ùå –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {status}", show_alert=True)

    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("players:"))
async def handle_show_players(callback: types.CallbackQuery):
    try:
        game_id_str = callback.data.split("players:")[1]
        game_id = int(game_id_str)
    except (IndexError, ValueError):
        await callback.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–¥—ñ—ó.", show_alert=True)
        return

    session = SessionLocal()
    regs = (
        session.query(Registration)
        .filter_by(game_id=game_id)
        .join(User, Registration.user_id == User.id)
        .with_entities(User.full_name, User.username)
        .all()
    )
    session.close()

    if not regs:
        text = "üîç –ü–æ–∫–∏ —â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–≤—Å—è."
    else:
        text = "üë• <b>–£—á–∞—Å–Ω–∏–∫–∏ –≥—Ä–∏:</b>\n\n"
        for i, (full_name, username) in enumerate(regs, 1):
            text += f"{i}. {full_name}"
            if username:
                text += f" (@{username})"
            text += "\n"

    await callback.message.answer(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data.startswith("unregister:"))
async def handle_unregister(callback: types.CallbackQuery):
    session = SessionLocal()
    game_id = int(callback.data.split("unregister:")[1])
    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()
    if not user:
        await callback.answer("‚ö†Ô∏è –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.", show_alert=True)
        session.close()
        return

    registration = session.query(Registration).filter_by(user_id=user.id, game_id=game_id).first()
    if registration:
        session.delete(registration)
        session.commit()
        await callback.answer("‚ùå –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Å–≤–æ—é —É—á–∞—Å—Ç—å.")
        await callback.message.answer("–í–∞—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
    else:
        await callback.answer("‚ö†Ô∏è –í–∏ –Ω–µ –±—É–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü—é –≥—Ä—É.", show_alert=True)
    session.close()
