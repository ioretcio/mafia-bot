from aiogram import Router, types
from aiogram.filters import Command
from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from models import User
from aiogram.types import FSInputFile
import os
from PIL import Image
from io import BytesIO
from db import get_connection

router = Router()


from aiogram.fsm.state import State, StatesGroup

class EditStates(StatesGroup):
    awaiting_new_username = State()
    awaiting_photo = State()


def get_back_to_main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )

def get_main_inline_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üìõ –ó–∞–º–æ–≤–∏—Ç–∏ —ñ–º–µ–Ω–Ω—É —Ç–∞–±–ª–∏—á–∫—É", callback_data="nameplate")],
            [InlineKeyboardButton(text="üìä –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å —ñ –æ–ø–ª–∞—Ç", callback_data="history")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="settings")],
            [InlineKeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ —ñ–≤–µ–Ω—Ç–∏", callback_data="upcoming_events")]  # ‚Üê –Ω–æ–≤–∞ –∫–Ω–æ–ø–∫–∞
        ]
    )

async def safe_edit_or_send(message: Message, text: str, reply_markup=None, parse_mode="HTML"):
    try:
        if message.text:  # —è–∫—â–æ —î —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–≥—É—î–º–æ
            await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        print(f"‚ùå safe_edit_or_send error: {e}")
        await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
                             
# /start
@router.message(Command("start"))
async def start_handler(message: types.Message):
    User.get_or_create(
        message.from_user.id,
        message.from_user.username,
        message.from_user.full_name
    )
    await message.answer(
        f"üëã –ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}!",
        reply_markup=get_main_inline_menu()
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å
@router.callback_query(F.data == "profile")
async def handle_menu_callback(callback: types.CallbackQuery):
    action = callback.data

    if action == "profile":
        user = User.get_by_tg_id(callback.from_user.id)

        text = f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å</b>\n\n" \
               f"–Ü–º‚Äô—è: {user[3]}\n" \
               f"–ù—ñ–∫: @{user[2]}\n" \
               f"–°—Ç–∞—Ç—É—Å: {user[5]}\n" \
               f"–Ü–≥–æ—Ä –≤—ñ–¥–≤—ñ–¥–∞–Ω–æ: {user[6]}\n" \
               f"–ë–æ–Ω—É—Å–∏: {user[7]}"
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫", callback_data="edit_username")],
            [InlineKeyboardButton(text="üñº –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ", callback_data="edit_photo")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        # –®–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ
        if user[4]:  # –ø–æ–ª–µ photo –Ω–µ –ø—É—Å—Ç–µ
            photo_path = os.path.join("static", user[4])
        else:
            photo_path = "resources/anon_user.png"

        try:
            photo = FSInputFile(photo_path)
            await callback.message.answer_photo(photo=photo, caption=text, parse_mode="HTML", reply_markup=markup)
            await callback.message.delete()
        except Exception as e:
            await callback.message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é.")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
    await callback.answer()

@router.callback_query(F.data == "nameplate")
async def handle_nameplate(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìõ –§–æ—Ä–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—á–∫–∏ –±—É–¥–µ —Ç—É—Ç.",
        reply_markup=get_back_to_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "history")
async def handle_history(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìä –¢—É—Ç –±—É–¥–µ —ñ—Å—Ç–æ—Ä—ñ—è —ñ–≥–æ—Ä —Ç–∞ –æ–ø–ª–∞—Ç.",
        reply_markup=get_back_to_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "settings")
async def handle_settings(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –¢—É—Ç –±—É–¥—É—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
        reply_markup=get_back_to_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: types.CallbackQuery):
    await safe_edit_or_send(callback.message, f"üëã –ü—Ä–∏–≤—ñ—Ç, {callback.from_user.full_name}!", reply_markup=get_main_inline_menu())
    await callback.message.delete()


@router.callback_query(lambda c: c.data == "edit_photo")
async def prompt_photo_upload(callback: types.CallbackQuery):
    await callback.message.answer("üì§ –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é —è–∫ –æ–∫—Ä–µ–º–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
    await callback.message.delete()


@router.callback_query(F.data == "upcoming_events")
async def show_upcoming_events(callback: types.CallbackQuery):
    conn = get_connection()
    c = conn.cursor()
    c.execute("SELECT date, time, location, type FROM games WHERE date >= DATE('now') ORDER BY date LIMIT 5")
    events = c.fetchall()
    conn.close()

    if not events:
        text = "üîï –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π."
    else:
        text = "üìÖ <b>–ù–∞–π–±–ª–∏–∂—á—ñ –ø–æ–¥—ñ—ó:</b>\n\n"
        for e in events:
            date, time, location, type_ = e
            text += f"‚Ä¢ <b>{date}</b> –æ <i>{time}</i> ‚Äî {type_} ({location})\n"

    await callback.message.edit_text(text, reply_markup=get_back_to_main_menu(),parse_mode="HTML")

@router.message(F.photo)
async def handle_profile_photo(message: types.Message):
    user = User.get_by_tg_id(message.from_user.id)
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_bytes = await message.bot.download_file(file.file_path)

    try:
        image = Image.open(BytesIO(file_bytes.read()))
        w, h = image.size
        side = min(w, h)

        # Central crop
        left = (w - side) // 2
        top = (h - side) // 2
        cropped = image.crop((left, top, left + side, top + side))
        resized = cropped.resize((1000, 1000))

        # Save
        os.makedirs("static/profile_photos", exist_ok=True)
        save_path = f"static/profile_photos/{message.from_user.id}.jpg"
        resized.save(save_path)

        # Update DB
        conn = get_connection()
        c = conn.cursor()
        c.execute("UPDATE users SET photo = ? WHERE tg_id = ?", (f"profile_photos/{message.from_user.id}.jpg", message.from_user.id))
        conn.commit()
        conn.close()

        await message.answer("‚úÖ –§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: {e}")


@router.callback_query(lambda c: c.data == "edit_username")
async def prompt_username(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úçÔ∏è –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º (–±–µ–∑ @)")
    await callback.message.delete()
    # –ó–±–µ—Ä–µ–∂–µ–º–æ —Å—Ç–∞–Ω
    await state.set_state(EditStates.awaiting_new_username)


@router.message(F.text, StateFilter(EditStates.awaiting_new_username))
async def save_new_username(message: types.Message, state: FSMContext):
    new_username = message.text.strip().lstrip("@")
    conn = get_connection()
    c = conn.cursor()
    c.execute("UPDATE users SET username = ? WHERE tg_id = ?", (new_username, message.from_user.id))
    conn.commit()
    conn.close()
    await message.answer(f"‚úÖ –ù—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ @{new_username}")
    await state.clear()